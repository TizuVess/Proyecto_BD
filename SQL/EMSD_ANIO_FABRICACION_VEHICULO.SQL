CREATE TABLE EMSD_ANIO_FABRICACION_VEHICULO(
    COD_ANIO_FABRICACION NUMBER,
    ANIO_FABRICACION DATE,
    CONSTRAINT PK_EMSD_ANIO_FABRICACION_VEHICULO PRIMARY KEY(COD_ANIO_FABRICACION)
);

--TRIGGERS ()
CREATE OR REPLACE TRIGGER TRG_EMSD_ANIO_FABRICACION_VEHICULO
BEFORE INSERT 
ON EMSD_ANIO_FABRICACION_VEHICULO
FOR EACH ROW
DECLARE 
    NUEVO_COD_ANIO := 0;
BEGIN
    SELECT NVL(MAX(COD_ANIO_FABRICACION),0) + 1  INTO NUEVO_COD_ANIO;
    INSERT INTO EMSD_ANIO_FABRICACION_VEHICULO(COD_ANIO_FABRICACION, ANIO_FABRICACION)
    VALUES(NUEVO_COD_ANIO, :NEW.ANIO_FABRICACION );
    IF :NEW.ANIO_FABRICACION IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'El año de fabricación no puede estar vacío.');
  END IF;
END;


CREATE OR REPLACE PROCEDURE PR_ANIO_FABRICACION_VEHICULO_CRUD (
    ANIO_FABRICACION_P DATE
) AS
BEGIN
    INSERT INTO EMSD_ANIO_FABRICACION_VEHICULO (COD_ANIO_FABRICACION,ANIO_FABRICACION)
    VALUES (P_COD_CATEGORIA, P_NOMBRE_CATEGORIA);
  END IF;
  IF(UPPER(OPCION) = 'UPDATE') THEN
    UPDATE EMSD_CATEGORIA_RESPUESTOS
    SET NOMBRE_CATEGORIA = P_NOMBRE_CATEGORIA
    WHERE COD_CATEGORIA = P_COD_CATEGORIA;
  END IF;
  IF(UPPER(OPCION) = 'DELETE') THEN
    DELETE FROM EMSD_CATEGORIA_RESPUESTOS
    WHERE COD_CATEGORIA = P_COD_CATEGORIA;
  END IF;
  COMMIT;
  EXCEPTION
      WHEN STORAGE_ERROR THEN
          RAISE_APPLICATION_ERROR(-6500, 'Fallo de memoria');
      WHEN NO_DATA_FOUND THEN
          RAISE_APPLICATION_ERROR(+100, 'No encontramos esos datos, saludos');
      WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20010, 'Uh, fallé, saludos. :)');
  ROLLBACK;
END;
