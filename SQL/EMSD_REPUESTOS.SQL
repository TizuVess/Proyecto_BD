CREATE TABLE EMSD_REPUESTOS(
    COD_REPUESTO NUMBER,
    NOMBRE_REPUESTO VARCHAR2(80),
    PRECIO_REPUESTO NUMBER,
    STOCK NUMBER,
    CONSTRAINT PK_EMSD_REPUESTOS PRIMARY KEY(COD_REPUESTO)
);

CREATE SEQUENCE SEQ_EMSD_REPUESTOS
START WITH 1
INCREMENT BY 1
CACHE 200
NOCYCLE;



CREATE OR REPLACE PROCEDURE CRUD_REPUESTOS(
    OPCION VARCHAR2,
    COD_P NUMBER,
    NOMBRE_P VARCHAR2,
    PRECIO_P NUMBER,
    STOCK_P NUMBER,
)
IS 
BEGIN
    LOCK TABLE EMSD_REPUESTOS IN ROW EXCLUSIVE MODE;
    IF (UPPER(OPCION)= 'R') THEN
        INSERT INTO EMSD_REPUESTOS(COD_REPUESTO, NOMBRE_REPUESTO, PRECIO_REPUESTO, STOCK)
            VALUES(SEQ_EMSD_REPUESTOS.NEXTVAL,NOMBRE_P,PRECIO_P,STOCK_P);
    END IF;
    IF (UPPER(OPCION)= 'U') THEN
        UPDATE EMSD_REPUESTOS SET
            NOMBRE_REPUESTO= NOMBRE_P, 
            PRECIO_REPUESTO= PRECIO_P
        WHERE(COD_REPUESTO=COD_P); --HACER TRIGGER QUE DECREMENTE O INCREMENTE EL STOCK
    END IF;
    IF (UPPER(OPCION)= 'D') THEN
        DELETE FROM EMSD_REPUESTOS
        WHERE(COD_REPUESTO=COD_P);
    END IF;
    COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(+100, 'No existe');
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'Fallo de memoria');
    ROLLBACK;
END;

CREATE OR REPLACE TRIGGER TR_STOCK_REPUESTOS --TRIGGER QUE DECREMENTE EL STOCK--
AFTER INSERT 
ON EMSD_VENTA
FOR EACH ROW
BEGIN
    UPDATE EMSD_REPUESTOS SET
        STOCK= :OLD.STCOK - 1
    WHERE ();
END;
