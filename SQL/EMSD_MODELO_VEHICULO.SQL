CREATE TABLE EMSD_MODELO_VEHICULO(
    COD_MODELO_VEHICULO NUMBER,
    NOMBRE_MODELO VARCHAR2(30),
    COD_MARCA_VEHICULO NUMBER,
    CONSTRAINT PK_EMSD_MODELO_VEHICULO PRIMARY KEY(COD_MODELO_VEHICULO),
    CONSTRAINT FK_EMSD_MODELO_VEHICULO_MARCA_VEHICULO FOREIGN KEY(COD_MARCA_VEHICULO) REFERENCES EMSD_MARCAS_VEHICULOS(COD_MARCA_VEHICULO)
)

CREATE OR REPLACE TRIGGER EMSD_MODELO_VEHICULO
BEFORE INSERT
ON EMSD_MODELO_VEHICULO
FOR EACH ROW
BEGIN
	SELECT MAX(COD_MODELO_VEHICULO)+1 INTO :NEW.COD_MODELO_VEHICULO
	FROM EMSD_MODELO_VEHICULO;
	IF(:NEW.COD_MODELO_VEHICULO IS NULL)THEN
		:NEW.COD_MODELO_VEHICULO := 1;
	END IF;
END;

CREATE OR REPLACE PROCEDURE EMSD_MODELOS_CRUD(
	P_OPCION VARCHAR2,
    P_COD_MODELO NUMBER,
	P_NOMBRE_MODELO VARCHAR2,
	P_COD_MARCA_VEHICULO NUMBER
)
IS 
BEGIN
	LOCK TABLE EMSD_MODELO_VEHICULO IN ROW EXCLUSIVE MODE;
	IF(P_OPCION = 'INSERT') THEN
        INSERT INTO EMSD_MODELO_VEHICULO(NOMBRE_MODELO, COD_MARCA_VEHICULO)
        	VALUES(UPPER(P_NOMBRE_MODELO), P_COD_MARCA_VEHICULO);
    END IF;
    IF(P_OPCION = 'DELETE') THEN
            DELETE FROM EMSD_MODELO_VEHICULO WHERE COD_MODELO_VEHICULO = P_COD_MODELO;    	
    END IF;
	COMMIT;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
    		RAISE_APPLICATION_ERROR(+100, 'No existe esta marca de vehiculo');
    	WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'Fallo de memoria');
    ROLLBACK;
END;
