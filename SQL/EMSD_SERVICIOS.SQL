CREATE TABLE EMSD_SERVICIOS(
	COD_SERVICIO NUMBER,
	NOMBRE_SERVICIO VARCHAR2(200),
	COSTO_SERVICIO NUMBER,
	COD_TIPO_SERVICIO NUMBER,
	CONSTRAINT FK_EMSD_SERVICIOS_TIPO_SERVICIO FOREIGN KEY(COD_TIPO_SERVICIO) REFERENCES EMSD_TIPOS_SERVICIO(COD_TIPO_SERVICIO),
	CONSTRAINT PK_EMSD_SERVICIOS PRIMARY KEY(COD_SERVICIO)
)

CREATE OR REPLACE TRIGGER EMSD_SERVICIOS
BEFORE INSERT
ON EMSD_SERVICIOS
FOR EACH ROW
BEGIN
	SELECT MAX(COD_SERVICIO)+1 INTO :NEW.COD_SERVICIO
	FROM EMSD_SERVICIOS;
	IF(:NEW.COD_SERVICIO IS NULL)THEN
		:NEW.COD_SERVICIO := 1;
	END IF;
END;

CREATE OR REPLACE PROCEDURE EMSD_SERVICIOS_CRUD(
	P_OPCION VARCHAR2,
	P_COD_SERVICIO NUMBER,
	P_NOMBRE_SERVICIO VARCHAR2,
	P_COSTO_SERVICIO NUMBER,
	P_COD_TIPO_SERVICIO NUMBER
)
IS 
BEGIN
    LOCK TABLE EMSD_SERVICIOS IN ROW EXCLUSIVE MODE;
    IF (UPPER(P_OPCION) = 'INSERT') THEN
        INSERT INTO EMSD_SERVICIOS(NOMBRE_SERVICIO, COSTO_SERVICIO, COD_TIPO_SERVICIO)
            VALUES(P_NOMBRE_SERVICIO, P_COSTO_SERVICIO, P_COD_TIPO_SERVICIO);
    END IF;
    IF (UPPER(P_OPCION) = 'UPDATE') THEN
        UPDATE EMSD_SERVICIOS SET
            COSTO_SERVICIO = P_COSTO_SERVICIO
        WHERE(COD_SERVICIO=P_COD_SERVICIO);
    END IF;
    IF (UPPER(P_OPCION) = 'DELETE') THEN
        DELETE FROM EMSD_SERVICIOS
        WHERE (COD_SERVICIO=P_COD_SERVICIO);
    END IF;
    COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(+100, 'No tenemos registrado este veh√≠culo');
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'Fallo de memoria');
    ROLLBACK;
END;
