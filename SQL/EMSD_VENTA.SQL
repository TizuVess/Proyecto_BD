CREATE TABLE EMSD_VENTA(
	COD_VENTA NUMBER,
	COD_TRABAJADOR NUMBER,
	COD_CLIENTE NUMBER,
	ESTADO_VENTA VARCHAR2(15),
	CONSTRAINT FK_EMSD_VENTA_TRABAJADOR FOREIGN KEY (COD_TRABAJADOR) REFERENCES EMSD_TRABAJADORES(COD_TRABAJADOR),
	CONSTRAINT FK_EMSD_VENTA_CLIENTE FOREIGN KEY (COD_CLIENTE) REFERENCES EMSD_CLIENTES(COD_CLIENTE),
	CONSTRAINT PK_EMSD_VENTA PRIMARY KEY (COD_VENTA)
)

CREATE OR REPLACE TRIGGER EMSD_VENTA
BEFORE INSERT
ON EMSD_VENTA
FOR EACH ROW
BEGIN
	SELECT MAX(COD_VENTA)+1 INTO :NEW.COD_VENTA
	FROM EMSD_VENTA;
	IF(:NEW.COD_VENTA IS NULL)THEN
		:NEW.COD_VENTA := 1;
	END IF;
END;

CREATE OR REPLACE PROCEDURE EMSD_VENTA_CRUD(
	P_OPCION VARCHAR2,
	P_COD_VENTA NUMBER,
	P_COD_TRABAJADOR NUMBER,
	P_COD_CLIENTE NUMBER,
	P_ESTADO_VENTA VARCHAR2
)
IS 
BEGIN
    LOCK TABLE EMSD_VENTA IN ROW EXCLUSIVE MODE;
    IF (UPPER(P_OPCION) = 'INSERT') THEN
        INSERT INTO EMSD_VENTA(COD_TRABAJADOR, COD_CLIENTE, ESTADO_VENTA)
            VALUES(P_COD_TRABAJADOR, P_COD_CLIENTE, 'COMPLETADA');
    END IF;
    IF (UPPER(P_OPCION) = 'UPDATE') THEN
        UPDATE EMSD_VENTA SET
            ESTADO_VENTA = P_ESTADO_VENTA
        WHERE(COD_VENTA=P_COD_VENTA);
    END IF;
    IF (UPPER(P_OPCION) = 'DELETE') THEN
        DELETE FROM EMSD_VENTA
        WHERE (COD_VENTA=P_COD_VENTA);
    END IF;
    COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(+100, 'No tenemos registrado este veh√≠culo');
        WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'Fallo de memoria');
    ROLLBACK;
END;
